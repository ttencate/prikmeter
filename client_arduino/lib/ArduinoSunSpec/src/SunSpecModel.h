#pragma once

#include <Arduino.h>

/**
 * A "lazy" parser of a SunSpec model. It contains an array of register values
 * and parses fields from it on request.
 *
 * Autogenerated classes derive from this and add getter functions for each
 * point (field).
 *
 * Note that write access is not currently supported.
 */
template<uint16 ID, uint16 LENGTH>
class SunSpecModel {
  public:
    static constexpr uint16 id() {
      return ID;
    }

    SunSpecModel() {
    }

    ~SunSpecModel() {
      deleteBuffer();
    }

  protected:
    String parse_string(uint16 offset, uint16 length) const {
      String result;
      if (offset >= bufSize_) {
        return result;
      }
      if (offset + length > bufSize_) {
        length = bufSize_ - offset;
      }
      result.reserve(length);
      uint16 const *const end = buffer_ + offset + length;
      for (uint16 const *curr = buffer_ + offset; curr < end; curr++) {
        uint8 c = (*curr) >> 8;
        if (!c) {
          break;
        }
        result += static_cast<char>(c);
        c = (*curr) & 0xff;
        if (!c) {
          break;
        }
        result += static_cast<char>(c);
      }
      return result;
    }

    sint16 parse_sint16(uint16 offset) const {
      if (offset >= bufSize_) {
        return 0x8000;
      }
      return static_cast<sint16>(buffer_[offset]);
    }

    uint16 parse_uint16(uint16 offset) const {
      if (offset >= bufSize_) {
        return 0xffff;
      }
      return buffer_[offset];
    }

  private:
    uint16 const *buffer_ = nullptr;
    uint16 bufSize_ = 0;

    SunSpecModel(SunSpecModel const &) = delete;
    SunSpecModel &operator=(SunSpecModel const &) = delete;

    /**
     * Initializes the model wrapping the given buffer. It takes ownership of
     * the buffer, so it will `delete[]` it when done.
     */
    void setBuffer(uint16 *buffer, uint16 bufSize) {
      deleteBuffer();

      if (bufSize != LENGTH) {
        ARDUINO_SUNSPEC_DEBUG_LOG("Model ");
        ARDUINO_SUNSPEC_DEBUG_LOG(ID);
        ARDUINO_SUNSPEC_DEBUG_LOG(" should have length ");
        ARDUINO_SUNSPEC_DEBUG_LOG(LENGTH);
        ARDUINO_SUNSPEC_DEBUG_LOG(" but has length ");
        ARDUINO_SUNSPEC_DEBUG_LOG(bufSize);
        if (bufSize < LENGTH) {
          ARDUINO_SUNSPEC_DEBUG_LOGLN("; missing points will be defaulted");
        } else if (bufSize > LENGTH) {
          ARDUINO_SUNSPEC_DEBUG_LOGLN("; extra registers will be ignored");
        }
      }

      buffer_ = buffer;
      bufSize_ = bufSize;
    }

    /**
     * Deletes the buffer, if any.
     */
    void deleteBuffer() {
      delete[] buffer_; // Deleting a nullptr is okay.
      buffer_ = nullptr;
      bufSize_ = 0;
    }

    friend class SunSpec;
};
